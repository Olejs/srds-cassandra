description = 'CassandraDemo'
apply plugin: 'base'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

eclipse {
  jdt {
    //if you want to alter the java versions (by default they are configured with gradle java plugin settings):
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    }
  }


allprojects {
  tasks.withType(JavaExec) {
    doFirst {
//      println commandLine
   }
  }
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}


repositories {
	maven { url "http://repo.springsource.org/libs-milestone" }
	maven { url "http://repo.springsource.org/libs-release" }
	mavenLocal()
	mavenCentral()
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
  compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'

  compile 'com.datastax.cassandra:cassandra-driver-core:3.3.0'
  compile 'org.apache.cassandra:cassandra-all:3.11.0'
}

configurations.all {
//    exclude module: 'logback-classic'
}

project.buildDir = 'bin'

mainClassName = "cassdemo.Main"

run {
    //systemProperty 'logback.configurationFile', 'logback.xml'
    standardInput = System.in
    
    if(project.hasProperty('myargs')){
        //String[] myargsArray = myargs.split(',')
        String[] myargsArray = myargs.split(' ')
        for (int i = 0; i < myargsArray.length; i++) 
            myargsArray[i] = myargsArray[i].trim();
        args(myargsArray)
    }
}

apply plugin: 'java'

task(crashTest, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.Main'
    classpath = sourceSets.main.runtimeClasspath
}

task(create_table_ticketrequests, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.backend.queries.CreateTableTicketRequests'
    classpath = sourceSets.main.runtimeClasspath
}

task(tickets_insert, dependsOn: 'classes', type: JavaExec) {
    if(project.hasProperty('myargs')){
        args(myargs.split(','))
    }
    main = 'cassdemo.backend.queries.InsertCustom'
    classpath = sourceSets.main.runtimeClasspath
}

task(tickets_trun, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.backend.queries.DeleteAll'
    classpath = sourceSets.main.runtimeClasspath
}

task(create_table_meetups, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.backend.queries.CreateTableMeetUps'
    classpath = sourceSets.main.runtimeClasspath
}

task(meetups_insert, dependsOn: 'classes', type: JavaExec) {
    if(project.hasProperty('myargs')){
        args(myargs.split(','))
    }
    main = 'cassdemo.backend.queries.InsertCustomMeetup'
    classpath = sourceSets.main.runtimeClasspath
}

task(create_table_workshops, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.backend.queries.CreateTableWorkshops'
    classpath = sourceSets.main.runtimeClasspath
}

task(workshops_insert_by_meetup_name, dependsOn: 'classes', type: JavaExec) {
    if(project.hasProperty('myargs')){
        args(myargs.split(','))
    }
    main = 'cassdemo.backend.queries.InsertWorkshopByMeetupName'
    classpath = sourceSets.main.runtimeClasspath
}
task(create_table_customers, dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'cassdemo.backend.queries.CreateTableCustomers'

}


task(reset_systems, dependsOn: 'classes', type: JavaExec) {
    main = 'cassdemo.backend.queries.ResetSystem'
    classpath = sourceSets.main.runtimeClasspath
}